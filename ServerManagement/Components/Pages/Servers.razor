<!-- this page directive is what makes the component routable -->
@page "/servers"
@rendermode InteractiveServer

@inject NavigationManager NavigationManager

<div>
    <h3 style="display: inline-block">Servers</h3>
    <a href="/servers/add" class="btn btn-primary btn-sm">Add new</a></div>
<br>

<div class="container-fluid text-center">
    <div class="row w-50">
        @foreach(var city in cities)
        {
            <div class="col">
                <div class="card@(city == selectedCity ? " border-primary" : "")">
                    <img src="@($"/images/{city}.png")" class="card-img-top" alt="@city">
                    <div class="card-body">
                        <button type="button" class="btn btn-primary" @onclick="@(() => SelectCity(city))">@city</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<br>
<!--
    It is recommended by Microsoft to always try and define interactivity on the component level (not globally or on parent component level)
    Also, it is best to define in not inside the component .cs, but the Razor markup in the component that uses the component we define the interactivity for (see below). 
    This has to do with the fact that we can enable both InteractiveServer and InteractiveWebassembly and we want to avoid conflicts
--> 
<!-- <ServerComponent rendermode="InteractiveServer"></ServerComponent> -->

<ul>
    @foreach(var server in servers)
    {
        <div class="p-50">
            <div style="padding: 10px">
                <span style="color:@(server.IsOnline ? "green" : "red");">
                    Server @server.Name (@server.Id) is @server.GetStatusString().
                </span>
                <!-- We have to use EditForm here to force Blazor to handle the change and update component state -->
                <EditForm Model="server" FormName="@($"delete-form-{server.Id}")" OnValidSubmit="@(() => DeleteServer(server.Id))">
                    <a href="/servers/edit/@server.Id" class="btn btn-primary btn-sm">Edit</a>
                    <button type="submit" class="btn btn-primary btn-sm">Delete</button>
                </EditForm>
            </div>
        </div>
    }
</ul>


@code {
    private const string DefaultCity = "Toronto";

    // state variables
    private List<Server> servers = ServersRepository.GetServersByCity(DefaultCity);
    private List<string> cities = CityRepository.GetAll();
    private string selectedCity = DefaultCity;

    private void DeleteServer(int serverId)
    {
        if (serverId > -1)
        {
            var server = servers.FirstOrDefault(x => x.Id == serverId);

            ServersRepository.DeleteServer(server);
            servers.Remove(server);
        }
    }

    private void SelectCity(string cityName)
    {
        selectedCity = cityName;
        servers = ServersRepository.GetServersByCity(cityName);
    }
}